/*QUESTION SET ONE*/

/*1. QUERY 1,  Create a query that lists each movie, the film category it is classified in, 
and the number of times it has been rented out 

QUERY:*/

SELECT DISTINCT cat.name As Category_name, 
	COUNT(rental.rental_id) As rental_count
	
FROM film_category AS fc
	JOIN category AS cat ON cat.category_id = fc.category_id
	JOIN film ON film.film_id = fc.film_id
	JOIN inventory As inv ON inv.film_id = film.film_id
	JOIN rental AS rental ON rental.inventory_id = inv.inventory_id
	
WHERE cat.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
GROUP BY 1
ORDER BY 1;



/*2. QUERY 2. Now we need to know how the length of rental duration of these family-friendly 
movies compares to the duration that all movies are rented for. 
Can you provide a table with the movie titles and divide them into 4 levels 
(first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles
(25%, 50%, 75%) of the rental duration for movies across all categories? 
Make sure to also indicate the category that these family-friendly movies fall into.

QUERY:*/

WITH family_category AS (
  SELECT fILM.title AS film_title, cat.name AS category_name, film.rental_duration , 
NTILE(4) OVER (ORDER BY film.rental_duration) AS standard_quartile
  FROM film 
  JOIN film_category fc
  ON film.film_id = fc.film_id
  JOIN category cat
  ON fc.category_id = cat.category_id
  WHERE cat.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music'))
  
SELECT category_name, standard_quartile, SUM(rental_duration)
FROM family_category
GROUP BY 1, 2
ORDER BY 1, 2;


/*3.  QUERY 3. Finally, provide a table with the family-friendly film category, each of the quartiles,
 and the corresponding count of movies within each combination of film category for each corresponding
 rental duration category. The resulting table should have three columns:

Category
Rental length category
Count

QUERY:*/

SELECT 
	a1.name, 
	a1.standard_quartile, 
	COUNT(a1.standard_quartile)
FROM
	(SELECT film.title, cat.name , film.rental_duration,
 	NTILE(4) OVER (ORDER BY film.rental_duration) AS standard_quartile
	 
FROM film_category AS fc
JOIN category AS cat
ON cat.category_id = fc.category_id
JOIN film
ON film.film_id = fc.film_id
WHERE cat.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')) a1 
GROUP BY 1, 2
ORDER BY 1, 2;


/*QUESTION SET TWO*/

/*1.  QUERY 1. We want to find out how the two stores compare in their count of rental orders 
during every month for all the years we have data for. Write a query that returns 
the store ID for the store, the year and month and the number of rental orders each 
store has fulfilled for that month. Your table should include a column for each of 
the following: year, month, store ID and count of rental orders fulfilled during that month.

QUERY:*/

SELECT
  DATE_PART('MONTH', rental_date) As Rental_Month,
  DATE_PART('YEAR', rental_date) As Rental_Years,
  st2.store_id,
  COUNT(*) As Count_Rental
FROM rental As ren
JOIN payment As pay
  ON pay.rental_id = ren.rental_id
JOIN staff AS st1
  ON st1.staff_id = pay.staff_id
JOIN store AS st2
  ON st2.store_id = st1.store_id
GROUP BY 1,
         2,
         3
ORDER BY 4 desc;

/*2. QUERY 2. We would like to know who were our top 10 paying customers, how many payments 
they made on a monthly basis during 2007, and what was the amount of the monthly payments. 
Can you write a query to capture the customer name, month and year of payment, and total payment
 amount for each month by these top 10 paying customers

QUERY:*/

SELECT 
	DATE_TRUNC('month', pay.payment_date) 
	pay_month, cust.first_name || ' ' ||
	cust.last_name  full_name, 
	COUNT(pay.amount) pay_countpermon, 
	SUM(pay.amount) pay_amount
	
FROM customer cust
JOIN payment pay
ON pay.customer_id = cust.customer_id
WHERE cust.first_name || ' ' || cust.last_name IN

(SELECT t1.full_name
FROM
(SELECT cust.first_name || ' ' || cust.last_name full_name, SUM(pay.amount) amount_total
FROM customer cust
JOIN payment pay
ON pay.customer_id = cust.customer_id
 
GROUP BY 1	
ORDER BY 2 DESC
LIMIT 10) t1) AND (pay.payment_date BETWEEN '2007-01-01' AND '2008-01-01')
GROUP BY 2, 1
ORDER BY 2, 1, 3 DESC;

/*3. QUERY 3.Finally, for each of these top 10 paying customers, I would like to find out 
the difference across their monthly payments during 2007. Please go ahead and write a query 
to compare the payment amounts in each successive month. Repeat this for each of these 10 paying customers. 
Also, it will be tremendously helpful if you can identify the customer name who paid the most difference 
in terms of payments.


QUERY:*/

WITH ta1 AS (SELECT (first_name || ' ' || last_name) name, 
                   cust.customer_id, 
                   pay.amount, 
                   pay.payment_date
			 
 FROM customer cust
                   JOIN payment pay
                    ON cust.customer_id = pay.customer_id),

     ta2 AS (SELECT ta1.customer_id
              FROM ta1
             GROUP BY 1
             ORDER BY SUM(ta1.amount) DESC
             LIMIT 10),


ta3 AS (SELECT ta1.name,
              DATE_PART('month', ta1.payment_date) payment_month, 
              DATE_PART('year', ta1.payment_date) payment_year,
              COUNT (*),
              SUM(ta1.amount),
              SUM(ta1.amount) total,
              LEAD(SUM(ta1.amount)) OVER(PARTITION BY ta1.name 
										 ORDER BY DATE_PART('month', ta1.payment_date)) lead,
              							LEAD(SUM(ta1.amount)) OVER(PARTITION BY ta1.name
										 ORDER BY DATE_PART('month', ta1.payment_date)) - SUM(ta1.amount) AS lead_dif

FROM ta1
              JOIN ta2
               ON ta1.customer_id = ta2.customer_id
        WHERE ta1.payment_date BETWEEN '20070101' AND '20080101'
        GROUP BY 1, 2, 3
        ORDER BY 1, 3, 2)

SELECT ta3.*,
       CASE
           WHEN ta3.lead_dif = (SELECT MAX(ta3.lead_dif) FROM
								ta3 ORDER BY 1 DESC LIMIT 1) THEN 'this is the maximum difference'
           ELSE NULL
           END AS is_max					

FROM ta3
 ORDER BY 1;